/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.billingDetails;

import com.invoice.ProcessBillingDetails;
import com.pojo.Bill;
import com.sql.model.ShopDetails;
import java.io.IOException;
import java.util.HashMap;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.text.DecimalFormat;
import java.util.ArrayList;
import com.invoice.CreateSimpleWorking;
import com.pojo.BillDetails;
import com.sql.InventoryDAO;
import com.sql.InvoiceDAO;
import com.sql.model.InventoryModel;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import javax.swing.JOptionPane;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.printing.PDFPageable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
 *
 * @author arjun.n
 */
public class AddBillingDetails extends javax.swing.JFrame {

    static AddBillingDetails frame;
    public String billType;
    /**
     * Creates new form JTableDemo
     */
    public AddBillingDetails() {
        initComponents();
        jTextField_Details.requestFocus();
    }

    public String getBillType() {
        return billType;
    }

    public void setBillType(String billType) {
        this.billType = billType;
    }

    static Logger log = LoggerFactory.getLogger("ANALYTICS");
    
    private static DecimalFormat df2 = new DecimalFormat(".##");
    int count = 1;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jTextField_Details = new javax.swing.JTextField();
        jLabelDetails = new javax.swing.JLabel();
        jLabelPrice = new javax.swing.JLabel();
        jTextField_Price = new javax.swing.JTextField();
        jCheckBox_InterState = new javax.swing.JCheckBox();
        jCheckBox_ExclusiveofTax = new javax.swing.JCheckBox();
        jButton_Add = new javax.swing.JButton();
        jLabel_Tax = new javax.swing.JLabel();
        jLabel_Quantity = new javax.swing.JLabel();
        jTextField_Quantity = new javax.swing.JTextField();
        jButton_Remove = new javax.swing.JButton();
        jLabel1_Message = new javax.swing.JLabel();
        jComboBox_Tax = new javax.swing.JComboBox<>();
        jButton_update = new javax.swing.JButton();
        jButton_Confirm = new javax.swing.JButton();
        jTextField_Total = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Items = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextField_Code = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });

        jLabelDetails.setText("Details");

        jLabelPrice.setText("Price");

        jTextField_Price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_PriceActionPerformed(evt);
            }
        });

        jCheckBox_InterState.setText("InterState");

        jCheckBox_ExclusiveofTax.setText("ExclusiveOfTax");

        jButton_Add.setText("Add");
        jButton_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddActionPerformed(evt);
            }
        });

        jLabel_Tax.setText("Tax");

        jLabel_Quantity.setText("Quantity");

        jButton_Remove.setText("Remove");
        jButton_Remove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_RemoveMouseClicked(evt);
            }
        });
        jButton_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RemoveActionPerformed(evt);
            }
        });

        jLabel1_Message.setForeground(new java.awt.Color(255, 51, 51));

        jComboBox_Tax.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "5", "12" }));
        jComboBox_Tax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_TaxActionPerformed(evt);
            }
        });

        jButton_update.setText("Update");
        jButton_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_updateActionPerformed(evt);
            }
        });

        jButton_Confirm.setText("Confirm");
        jButton_Confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ConfirmActionPerformed(evt);
            }
        });

        jTextField_Total.setEditable(false);
        jTextField_Total.setText("0");

        jLabel3.setText("Total");

        jTable_Items.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SI", "Name", "QTY", "RATE", "Amount", "CGST", "SGST", "IGST", "Tax", "ItemCode"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable_Items.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_ItemsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_Items);

        jLabel1.setText("Code");

        jTextField_Code.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_CodeActionPerformed(evt);
            }
        });
        jTextField_Code.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField_CodeKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1_Message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jCheckBox_ExclusiveofTax)
                                    .addComponent(jButton_Remove, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton_update)
                                    .addComponent(jCheckBox_InterState))))
                        .addGap(32, 32, 32))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelDetails, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel_Tax, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel_Quantity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(93, 93, 93)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField_Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jTextField_Details, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                                .addComponent(jTextField_Price, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                                .addComponent(jTextField_Code))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addComponent(jComboBox_Tax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton_Add)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(291, 291, 291)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_Total, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 697, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton_Confirm)
                .addGap(77, 77, 77))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_Code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_Details, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPrice)
                    .addComponent(jTextField_Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Quantity))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Tax)
                    .addComponent(jComboBox_Tax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Add))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox_ExclusiveofTax)
                    .addComponent(jCheckBox_InterState))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_update)
                    .addComponent(jButton_Remove))
                .addGap(42, 42, 42)
                .addComponent(jLabel1_Message, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 146, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_Total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(17, 17, 17)
                .addComponent(jButton_Confirm)
                .addGap(87, 87, 87))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean validateBillPage() {
        log.info("validateBillPage");
        if (jTextField_Quantity.getText().isEmpty()
                || jTextField_Price.getText().isEmpty() || jTextField_Details.getText().isEmpty()) {
              log.info("validateBillPage , One of the information not passed");
            return false;
        } else {
            log.info("validateBillPage , Valid request");
            return true;
        }
    }
    private void jButton_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddActionPerformed
        // TODO add your handling code here:
        jLabel1_Message.setText("");

        if (!validateBillPage()) {
            jLabel1_Message.setText("Quantity , Text , Price, Tax field should not be left blank");
        } else {
            double quantity = Double.parseDouble(jTextField_Quantity.getText());
            double taxPercent = Double.parseDouble(jComboBox_Tax.getSelectedItem().toString());
           

            double itemPrice = Double.parseDouble(jTextField_Price.getText());
            String details = jTextField_Details.getText();

            DefaultTableModel model = (DefaultTableModel) jTable_Items.getModel();
            HashMap<String, Double> result = new HashMap<String, Double>();
            if(jCheckBox_ExclusiveofTax.isSelected()){
                result = calculateTax(quantity, itemPrice, taxPercent, jCheckBox_InterState.isSelected());
            }else{
                result = calculateTaxInclusiveOfPrice(quantity, itemPrice, taxPercent,  jCheckBox_InterState.isSelected());
            }

            model.addRow(new Object[]{count, details, quantity , result.get("totalPrice"),result.get("amount"), result.get("cgst"), result.get("sgst"), result.get("igst"),taxPercent, jTextField_Code.getText()});
            count++;
            
            jTextField_Details.setText(null);
            jTextField_Quantity.setText(null);
            jTextField_Price.setText(null);
            jTextField_Code.setText(null);
            jTextField_Code.requestFocus();
            
            
            double billTotal = getBillTotal();
            jTextField_Total.setText(Double.toString(billTotal));
            
        }
    }//GEN-LAST:event_jButton_AddActionPerformed

    public double getBillTotal(){
        DefaultTableModel model = (DefaultTableModel)jTable_Items.getModel();
        double total=0;
        if(model.getRowCount() > 0){
            for(int i = 0 ; i < model.getRowCount();i++){
                double t = (Double) model.getValueAt(i, 4);
                total+=t;
            }
        }
        
        return total;
    }
    
    private void jButton_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_updateActionPerformed
        // TODO add your handling code here:
        jLabel1_Message.setText("");
        DefaultTableModel model = (DefaultTableModel) jTable_Items.getModel();
        if (jTable_Items.getSelectedRow() == -1) {
            if (jTable_Items.getRowCount() == 0) {
                jLabel1_Message.setText("Table is empty");
            } else {
                jLabel1_Message.setText("You must select a product");
            }
        } else {
            double quantity = Double.parseDouble(jTextField_Quantity.getText());
            double taxPercent = Integer.parseInt(jComboBox_Tax.getSelectedItem().toString());

            double itemPrice = Double.parseDouble(jTextField_Price.getText());
            String details = jTextField_Details.getText();
            HashMap<String, Double> result = new HashMap<String , Double>();
            if(jCheckBox_ExclusiveofTax.isSelected()){
                 result = calculateTax(quantity, itemPrice, taxPercent, jCheckBox_InterState.isSelected());
            }else{
                 result = calculateTaxInclusiveOfPrice(quantity, itemPrice, taxPercent, jCheckBox_InterState.isSelected());
            }
            
            model.setValueAt(details, jTable_Items.getSelectedRow(), 1);
            model.setValueAt(result.get("cgst"), jTable_Items.getSelectedRow(), 5);
            model.setValueAt(result.get("sgst"), jTable_Items.getSelectedRow(), 6);
            model.setValueAt(result.get("igst"), jTable_Items.getSelectedRow(), 7);
            model.setValueAt(quantity, jTable_Items.getSelectedRow(), 2);
            model.setValueAt(result.get("amount"), jTable_Items.getSelectedRow(), 4);
            model.setValueAt(result.get("totalPrice"), jTable_Items.getSelectedRow(), 3);
            model.setValueAt(taxPercent, jTable_Items.getSelectedRow(), 8);
            model.setValueAt( jTextField_Code.getText(), jTable_Items.getSelectedRow(), 9);
            
            jTextField_Details.setText(null);
            jTextField_Quantity.setText(null);
            jTextField_Price.setText(null);
            jTextField_Code.setText(null);
            jTextField_Details.requestFocus();
            
           //double billTotal = Double.parseDouble(jTextField_Total.getText()) + result.get("amount");
            //jTextField_Total.setText(Double.toString(billTotal));
            double billTotal = getBillTotal();
            jTextField_Total.setText(Double.toString(billTotal));
            
        }
    }//GEN-LAST:event_jButton_updateActionPerformed

    public double roundOff(double value){
        double finalValue = Math.round( value * 100.0 ) / 100.0;
        return finalValue;
    }
    
    private void jButton_RemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_RemoveMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_RemoveMouseClicked

    private void jTable_ItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_ItemsMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable_Items.getModel();
        jTextField_Details.setText(model.getValueAt(jTable_Items.getSelectedRow(), 1).toString());
        String quantity = model.getValueAt(jTable_Items.getSelectedRow(), 2).toString();
        jTextField_Quantity.setText(quantity);
        jTextField_Price.setText("0");
        String code = model.getValueAt(jTable_Items.getSelectedRow(), 9).toString();
        jTextField_Code.setText(code);
        jTextField_Price.requestFocus();
    }//GEN-LAST:event_jTable_ItemsMouseClicked

    private void jButton_RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RemoveActionPerformed
       
        jLabel1_Message.setText("");
        DefaultTableModel model = (DefaultTableModel) jTable_Items.getModel();
        if (jTable_Items.getSelectedRow() == -1) {
            if (jTable_Items.getRowCount() == 0) {
                jLabel1_Message.setText("Table is empty");
            } else {
                jLabel1_Message.setText("You must select a product");
            }
        } else{
            model.removeRow(jTable_Items.getSelectedRow());
        }
        
        double billTotal = getBillTotal();
        jTextField_Total.setText(Double.toString(billTotal));
    }//GEN-LAST:event_jButton_RemoveActionPerformed

  
    public void updateInventory(Bill bill){
        ArrayList<BillDetails> details = bill.getDetails();
        for(int i=0; i<details.size() ; i++){
           String itemCode = details.get(i).getItemCode();
           InventoryDAO inventory_connection = new InventoryDAO();
           InventoryModel itemData = inventory_connection.getDetailsFromItemNo(itemCode);
           if(itemData != null){
                double dbQuantity = itemData.getQuantity();
                double userQuanity = details.get(i).getQty();
                double updateValue = dbQuantity - userQuanity;
                if(updateValue < 0){
                    updateValue = 0;
                }
                inventory_connection.updateQuantity(itemCode, updateValue);
            }
        }
       
    }
    
    private void jButton_ConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ConfirmActionPerformed
       // show shop popup for billing
        ProcessConfirmAction action = new ProcessConfirmAction();
        ArrayList<ShopDetails> shopDetails = action.getShopDetails();
        
        String selectedShopName = action.confirmAction(rootPane, shopDetails);
        ShopDetails confirmedShopDetails = new ShopDetails();
        
        for(int i=0; i< shopDetails.size() ; i++){
            if(shopDetails.get(i).getName().equals(selectedShopName)){
                confirmedShopDetails = shopDetails.get(i);
            }
        }
        
        ProcessBillingDetails details = new ProcessBillingDetails();
        Bill bill = details.process(jTable_Items,billType);
        InvoiceDAO insertInvoice = new InvoiceDAO();
        
        if(billType.equals("invoice")){
             insertInvoice.insertInvoice(bill);
        }else{
             insertInvoice.updateInvoiceId(bill.getInvoiceId(),billType);
        }
        // update Inventory
        updateInventory(bill);
       
        PDDocument document;
        CreateSimpleWorking work = new CreateSimpleWorking();
        try{
            document = work.create(confirmedShopDetails, bill);
            PrinterJob job = PrinterJob.getPrinterJob();
            job.setPageable(new PDFPageable(document));
            job.print();
            JOptionPane.showMessageDialog(rootPane, "Bill Generated Successfully. BillNo: " +bill.getInvoiceId());
            removeTableEntries();
            count=1;
          
        }catch(IOException e){
            e.printStackTrace();
        }catch(PrinterException e1){
            e1.printStackTrace();
        }
       
    }//GEN-LAST:event_jButton_ConfirmActionPerformed

    public void removeTableEntries(){
       DefaultTableModel model = (DefaultTableModel)jTable_Items.getModel();

        while(model.getRowCount() > 0){
            for(int i = 0 ; i < model.getRowCount();i++){
                 model.removeRow(i);
            }
        }
    }
    
    private void jComboBox_TaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_TaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_TaxActionPerformed

    private void jTextField_PriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_PriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_PriceActionPerformed

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentHidden

    private void jTextField_CodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_CodeKeyReleased
       InventoryDAO inventory = new InventoryDAO();
       String item_no = jTextField_Code.getText();
       InventoryModel details = inventory.getDetailsFromItemNo(item_no);
       if(details != null){
           jTextField_Details.setText(details.getDetails());
       }
    }//GEN-LAST:event_jTextField_CodeKeyReleased

    private void jTextField_CodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_CodeActionPerformed
        
    }//GEN-LAST:event_jTextField_CodeActionPerformed

    public HashMap<String, Double> calculateTax(double quantity, double itemPrice, double taxPercent, boolean interState) {

        HashMap<String, Double> response = new HashMap<String, Double>();
       
        double pricePerItem = 0;
        //double taxPerItem = (taxPercent / 100) * itemPrice;
        if(taxPercent == 5){
            pricePerItem = itemPrice*1.05;
        }else if(taxPercent == 12){
            pricePerItem = itemPrice*1.12;
        }
        
       // double pricePerItem = itemPrice/1.05;
        double taxAmt = pricePerItem - itemPrice ;
        double totalTax = roundOff(quantity * taxAmt);
        double totalPrice = roundOff(quantity * pricePerItem);
        double amount = roundOff(itemPrice * quantity);

        if (interState) {
            response.put("igst", totalTax);
            response.put("sgst", 0.0);
            response.put("cgst", 0.0);
        } else {
            response.put("igst", 0.0);
            response.put("sgst", totalTax / 2);
            response.put("cgst", totalTax / 2);
        }
        response.put("totalPrice",amount );
        response.put("amount", totalPrice);
        return response;
    }
    
    public HashMap<String,Double> calculateTaxInclusiveOfPrice(double quantity, double itemPrice, double taxPercent, boolean interState){
       
        HashMap<String, Double> response = new HashMap<String, Double>();
        double pricePerItem = 0;
        //double taxPerItem = (taxPercent / 100) * itemPrice;
        if(taxPercent == 5){
            pricePerItem = itemPrice/1.05;
        }else if(taxPercent == 12){
            pricePerItem = itemPrice/1.12;
        }
        //double pricePerItem = itemPrice/1.05;
        double taxAmt = itemPrice - pricePerItem ;
        double totalTax = roundOff(quantity * taxAmt);
        double totalPrice = roundOff(quantity * pricePerItem);
        double amount = roundOff(itemPrice * quantity);
        
        
        if(interState){
            response.put("igst", totalTax);
            response.put("sgst", 0.0);
            response.put("cgst", 0.0);
        }else{
            response.put("igst", 0.0);
            response.put("cgst", totalTax/2);
            response.put("sgst", totalTax/2);
        }
        response.put("totalPrice", totalPrice);
        response.put("amount", amount);
        return response;
    }

    public JTable getjTable_Items() {
        return jTable_Items;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddBillingDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddBillingDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddBillingDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddBillingDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                 frame = new AddBillingDetails();
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Add;
    private javax.swing.JButton jButton_Confirm;
    private javax.swing.JButton jButton_Remove;
    private javax.swing.JButton jButton_update;
    private javax.swing.JCheckBox jCheckBox_ExclusiveofTax;
    private javax.swing.JCheckBox jCheckBox_InterState;
    private javax.swing.JComboBox<String> jComboBox_Tax;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel1_Message;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelDetails;
    private javax.swing.JLabel jLabelPrice;
    private javax.swing.JLabel jLabel_Quantity;
    private javax.swing.JLabel jLabel_Tax;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTable_Items;
    private javax.swing.JTextField jTextField_Code;
    private javax.swing.JTextField jTextField_Details;
    private javax.swing.JTextField jTextField_Price;
    private javax.swing.JTextField jTextField_Quantity;
    private javax.swing.JTextField jTextField_Total;
    // End of variables declaration//GEN-END:variables
}
